# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.user_finger import UserFinger
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class User(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, passwd: str=None, card_no: int=None, authorize: List[bool]=None, finger: List[UserFinger]=None):
        """
        User - a model defined in Swagger

        :param id: The id of this User.
        :type id: str
        :param name: The name of this User.
        :type name: str
        :param passwd: The passwd of this User.
        :type passwd: str
        :param card_no: The card_no of this User.
        :type card_no: int
        :param authorize: The authorize of this User.
        :type authorize: List[bool]
        :param finger: The finger of this User.
        :type finger: List[UserFinger]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'passwd': str,
            'card_no': int,
            'authorize': List[bool],
            'finger': List[UserFinger]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'passwd': 'passwd',
            'card_no': 'cardNo',
            'authorize': 'authorize',
            'finger': 'finger'
        }

        self._id = id
        self._name = name
        self._passwd = passwd
        self._card_no = card_no
        self._authorize = authorize
        self._finger = finger

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.
        :rtype: User
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this User.
        用户ID，只能数字，最大9位

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this User.
        用户ID，只能数字，最大9位

        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this User.
        用户名，暂时不用

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this User.
        用户名，暂时不用

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def passwd(self) -> str:
        """
        Gets the passwd of this User.
        用户密码，只能数字，最大6位

        :return: The passwd of this User.
        :rtype: str
        """
        return self._passwd

    @passwd.setter
    def passwd(self, passwd: str):
        """
        Sets the passwd of this User.
        用户密码，只能数字，最大6位

        :param passwd: The passwd of this User.
        :type passwd: str
        """

        self._passwd = passwd

    @property
    def card_no(self) -> int:
        """
        Gets the card_no of this User.
        卡号，8字节整数形式

        :return: The card_no of this User.
        :rtype: int
        """
        return self._card_no

    @card_no.setter
    def card_no(self, card_no: int):
        """
        Sets the card_no of this User.
        卡号，8字节整数形式

        :param card_no: The card_no of this User.
        :type card_no: int
        """

        self._card_no = card_no

    @property
    def authorize(self) -> List[bool]:
        """
        Gets the authorize of this User.
        1-4号门是否可开启

        :return: The authorize of this User.
        :rtype: List[bool]
        """
        return self._authorize

    @authorize.setter
    def authorize(self, authorize: List[bool]):
        """
        Sets the authorize of this User.
        1-4号门是否可开启

        :param authorize: The authorize of this User.
        :type authorize: List[bool]
        """

        self._authorize = authorize

    @property
    def finger(self) -> List[UserFinger]:
        """
        Gets the finger of this User.

        :return: The finger of this User.
        :rtype: List[UserFinger]
        """
        return self._finger

    @finger.setter
    def finger(self, finger: List[UserFinger]):
        """
        Sets the finger of this User.

        :param finger: The finger of this User.
        :type finger: List[UserFinger]
        """

        self._finger = finger

