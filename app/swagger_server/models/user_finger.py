# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class UserFinger(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, finger_id: int=None, size: int=None, valid: bool=None, template: str=None):
        """
        UserFinger - a model defined in Swagger

        :param finger_id: The finger_id of this UserFinger.
        :type finger_id: int
        :param size: The size of this UserFinger.
        :type size: int
        :param valid: The valid of this UserFinger.
        :type valid: bool
        :param template: The template of this UserFinger.
        :type template: str
        """
        self.swagger_types = {
            'finger_id': int,
            'size': int,
            'valid': bool,
            'template': str
        }

        self.attribute_map = {
            'finger_id': 'fingerID',
            'size': 'size',
            'valid': 'valid',
            'template': 'template'
        }

        self._finger_id = finger_id
        self._size = size
        self._valid = valid
        self._template = template

    @classmethod
    def from_dict(cls, dikt) -> 'UserFinger':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User_finger of this UserFinger.
        :rtype: UserFinger
        """
        return deserialize_model(dikt, cls)

    @property
    def finger_id(self) -> int:
        """
        Gets the finger_id of this UserFinger.
        手指编号（0-9），胁迫（16-25）

        :return: The finger_id of this UserFinger.
        :rtype: int
        """
        return self._finger_id

    @finger_id.setter
    def finger_id(self, finger_id: int):
        """
        Sets the finger_id of this UserFinger.
        手指编号（0-9），胁迫（16-25）

        :param finger_id: The finger_id of this UserFinger.
        :type finger_id: int
        """

        self._finger_id = finger_id

    @property
    def size(self) -> int:
        """
        Gets the size of this UserFinger.
        指纹模板长度

        :return: The size of this UserFinger.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """
        Sets the size of this UserFinger.
        指纹模板长度

        :param size: The size of this UserFinger.
        :type size: int
        """

        self._size = size

    @property
    def valid(self) -> bool:
        """
        Gets the valid of this UserFinger.
        是否胁迫指纹

        :return: The valid of this UserFinger.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid: bool):
        """
        Sets the valid of this UserFinger.
        是否胁迫指纹

        :param valid: The valid of this UserFinger.
        :type valid: bool
        """

        self._valid = valid

    @property
    def template(self) -> str:
        """
        Gets the template of this UserFinger.
        指纹模板

        :return: The template of this UserFinger.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template: str):
        """
        Sets the template of this UserFinger.
        指纹模板

        :param template: The template of this UserFinger.
        :type template: str
        """

        self._template = template

